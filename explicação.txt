Com certeza! Para importar um arquivo **XLS/XLSX** para o MongoDB usando **Node.js**, você pode usar as bibliotecas `xlsx` para ler o Excel e `mongodb` para conectar ao banco de dados.  

---

## 🔹 **Passos para Importar um XLS/XLSX para o MongoDB usando Node.js**  

### 1️⃣ **Instalar as dependências**  
Se ainda não tiver o Node.js instalado, instale antes de continuar.  

Agora, instale os pacotes necessários no seu projeto:  
```bash
npm install mongodb xlsx
```

- `mongodb`: Driver oficial para conectar ao MongoDB.  
- `xlsx`: Biblioteca para manipulação de arquivos Excel.  

---

### 2️⃣ **Criar o Script de Importação**
Agora, crie um arquivo **importExcel.js** e adicione o seguinte código:

```javascript
const XLSX = require("xlsx");
const { MongoClient } = require("mongodb");

// 📌 Configuração do MongoDB
const MONGO_URL = "mongodb://localhost:27017"; // Altere conforme necessário
const DATABASE_NAME = "meu_banco_de_dados";
const COLLECTION_NAME = "minha_colecao";

// 📌 Caminho do arquivo Excel
const FILE_PATH = "dados.xlsx"; // Altere para o nome do seu arquivo

async function importExcelToMongoDB() {
    try {
        // 📌 Conectar ao MongoDB
        const client = new MongoClient(MONGO_URL);
        await client.connect();
        console.log("✅ Conectado ao MongoDB!");

        const db = client.db(DATABASE_NAME);
        const collection = db.collection(COLLECTION_NAME);

        // 📌 Ler o arquivo Excel
        const workbook = XLSX.readFile(FILE_PATH);
        const sheetName = workbook.SheetNames[0]; // Pega a primeira aba
        const sheet = workbook.Sheets[sheetName];

        // 📌 Converter os dados para JSON
        const data = XLSX.utils.sheet_to_json(sheet);

        // 📌 Inserir os dados no MongoDB
        if (data.length > 0) {
            await collection.insertMany(data);
            console.log(`✅ ${data.length} documentos inseridos com sucesso!`);
        } else {
            console.log("⚠️ Nenhum dado encontrado no arquivo.");
        }

        // 📌 Fechar a conexão com o banco
        await client.close();
        console.log("🔌 Conexão encerrada.");
    } catch (error) {
        console.error("❌ Erro ao importar dados:", error);
    }
}

// Executar a função de importação
importExcelToMongoDB();
```

---

### 3️⃣ **Executar o Script**
Agora, basta rodar o script com o Node.js:  
```bash
node importExcel.js
```

---

## 🔹 **Explicação do Código**
✅ **Conexão com o MongoDB** utilizando `MongoClient`  
✅ **Leitura do arquivo Excel** usando `XLSX.readFile()`  
✅ **Conversão dos dados** para JSON com `XLSX.utils.sheet_to_json()`  
✅ **Inserção no MongoDB** com `insertMany()`  
✅ **Fechamento da conexão** para evitar consumo desnecessário de recursos  

---

## 🔹 **Verificando os Dados no MongoDB**
Após rodar o script, verifique os dados no **MongoDB Compass** ou no terminal:  
```bash
mongo
use meu_banco_de_dados
db.minha_colecao.find().pretty()
```

Se precisar de mais alguma coisa, só chamar! 🚀🔧

==========================================================================================================================================


Sim! O processo é **praticamente o mesmo**, com apenas uma pequena diferença:  

Por padrão, a biblioteca `xlsx` suporta **arquivos `.xls` (formato antigo do Excel)**, **mas** pode ser necessário instalar um pacote extra (`xlsjs`) caso encontre problemas.  

---

### 🔹 **O que muda para arquivos `.xls`?**
A única mudança no código é **garantir que a biblioteca `xlsx` suporte o formato antigo corretamente**.  

Se você encontrar problemas ao ler o `.xls`, instale o pacote `xlsjs`:  
```bash
npm install xlsjs
```
Depois, basta rodar o mesmo código que passei antes! O `xlsx.readFile("arquivo.xls")` funciona normalmente para ambos os formatos (`.xls` e `.xlsx`).  

---

### 🔹 **Caso precise garantir compatibilidade total**  
Se estiver lidando com arquivos `.xls` muito antigos e precisar de uma solução robusta, altere a leitura para algo assim:

```javascript
const XLSX = require("xlsx");

// 📌 Ler arquivo XLS
const workbook = XLSX.readFile("arquivo.xls", { cellDates: true });

// 📌 Obter a primeira aba
const sheetName = workbook.SheetNames[0];
const sheet = workbook.Sheets[sheetName];

// 📌 Converter para JSON
const data = XLSX.utils.sheet_to_json(sheet);
console.log(data);
```

Isso garante que qualquer formato de Excel seja lido corretamente.  

---

### 🔹 **Conclusão**
✔️ Para **.xlsx** (Excel moderno), o código original já funciona.  
✔️ Para **.xls** (Excel antigo), normalmente o código também funciona, mas se houver erro, tente instalar `xlsjs` ou use `{ cellDates: true }`.  

Se precisar de mais alguma coisa, só chamar! 🚀🔧

==================================================================================================================================================================

Sim! Você pode usar o pacote **`readline`** do Node.js para capturar a entrada do usuário no terminal e definir dinamicamente o nome do arquivo Excel antes de processá-lo.  

---

## 🔹 **Passos para Pedir o Nome do Arquivo no Terminal**
Basta modificar o código para incluir o **prompt interativo** e esperar a entrada do usuário.

### **Código Atualizado:**
```javascript
const XLSX = require("xlsx");
const { MongoClient } = require("mongodb");
const readline = require("readline");

// 📌 Criar interface para ler entrada do terminal
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// 📌 Configuração do MongoDB
const MONGO_URL = "mongodb://localhost:27017"; // Altere conforme necessário
const DATABASE_NAME = "meu_banco_de_dados";
const COLLECTION_NAME = "minha_colecao";

// 📌 Perguntar ao usuário o nome do arquivo
rl.question("Digite o nome do arquivo XLS/XLSX (ex: dados.xlsx): ", async (filePath) => {
    try {
        // 📌 Conectar ao MongoDB
        const client = new MongoClient(MONGO_URL);
        await client.connect();
        console.log("✅ Conectado ao MongoDB!");

        const db = client.db(DATABASE_NAME);
        const collection = db.collection(COLLECTION_NAME);

        // 📌 Ler o arquivo Excel
        const workbook = XLSX.readFile(filePath);
        const sheetName = workbook.SheetNames[0]; // Pega a primeira aba
        const sheet = workbook.Sheets[sheetName];

        // 📌 Converter os dados para JSON
        const data = XLSX.utils.sheet_to_json(sheet);

        // 📌 Inserir os dados no MongoDB
        if (data.length > 0) {
            await collection.insertMany(data);
            console.log(`✅ ${data.length} documentos inseridos com sucesso!`);
        } else {
            console.log("⚠️ Nenhum dado encontrado no arquivo.");
        }

        // 📌 Fechar a conexão com o banco
        await client.close();
        console.log("🔌 Conexão encerrada.");
    } catch (error) {
        console.error("❌ Erro ao importar dados:", error);
    } finally {
        rl.close(); // Fechar o readline
    }
});
```

---

## 🔹 **Como Funciona esse Código?**
✅ O script **pergunta o nome do arquivo** ao usuário no terminal.  
✅ O nome do arquivo digitado **preenche automaticamente a variável `filePath`**.  
✅ O arquivo é **lido** e os dados são **inseridos no MongoDB**.  
✅ A conexão com o banco é **fechada corretamente** no final.  

---

## 🔹 **Como Rodar o Script no Terminal?**
Execute o script normalmente no terminal:  
```bash
node importExcel.js
```
Ele vai exibir:  
```
Digite o nome do arquivo XLS/XLSX (ex: dados.xlsx): 
```
Agora, **digite o nome do arquivo** (ex: `meu_arquivo.xls`) e pressione **Enter**.  

Se precisar de mais alguma coisa, só chamar! 🚀🔧